/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TransferNameRouteImport } from './routes/transfer-name'
import { Route as RegisterNameRouteImport } from './routes/register-name'
import { Route as ActivitiesRouteImport } from './routes/activities'
import { Route as AboutRouteImport } from './routes/about'
import { Route as IndexRouteImport } from './routes/index'

const TransferNameRoute = TransferNameRouteImport.update({
  id: '/transfer-name',
  path: '/transfer-name',
  getParentRoute: () => rootRouteImport,
} as any)
const RegisterNameRoute = RegisterNameRouteImport.update({
  id: '/register-name',
  path: '/register-name',
  getParentRoute: () => rootRouteImport,
} as any)
const ActivitiesRoute = ActivitiesRouteImport.update({
  id: '/activities',
  path: '/activities',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/activities': typeof ActivitiesRoute
  '/register-name': typeof RegisterNameRoute
  '/transfer-name': typeof TransferNameRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/activities': typeof ActivitiesRoute
  '/register-name': typeof RegisterNameRoute
  '/transfer-name': typeof TransferNameRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/activities': typeof ActivitiesRoute
  '/register-name': typeof RegisterNameRoute
  '/transfer-name': typeof TransferNameRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/activities'
    | '/register-name'
    | '/transfer-name'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/about' | '/activities' | '/register-name' | '/transfer-name'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/activities'
    | '/register-name'
    | '/transfer-name'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  ActivitiesRoute: typeof ActivitiesRoute
  RegisterNameRoute: typeof RegisterNameRoute
  TransferNameRoute: typeof TransferNameRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/transfer-name': {
      id: '/transfer-name'
      path: '/transfer-name'
      fullPath: '/transfer-name'
      preLoaderRoute: typeof TransferNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/register-name': {
      id: '/register-name'
      path: '/register-name'
      fullPath: '/register-name'
      preLoaderRoute: typeof RegisterNameRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/activities': {
      id: '/activities'
      path: '/activities'
      fullPath: '/activities'
      preLoaderRoute: typeof ActivitiesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  ActivitiesRoute: ActivitiesRoute,
  RegisterNameRoute: RegisterNameRoute,
  TransferNameRoute: TransferNameRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
